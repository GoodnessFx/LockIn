{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0},"end":{"line":1,"column":78}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"],"imports":1}},{"name":"./ExpoFontLoader","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0},"end":{"line":2,"column":46}}],"key":"7dk3JQGwGYesJt8OOG3pkBz+dtE=","exportNames":["*"],"imports":1}},{"name":"./Font.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0},"end":{"line":3,"column":43}}],"key":"iwvcxaVgfIXdww6iPrKSgtcaZy8=","exportNames":["*"],"imports":1}},{"name":"./FontLoader","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0},"end":{"line":4,"column":70}}],"key":"ubgLNxOkixzH8pVapAwap9wQ8XU=","exportNames":["*"],"imports":1}},{"name":"./memory","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0},"end":{"line":5,"column":124}}],"key":"wlrMBDc1MVhnZOig0xhYu83J328=","exportNames":["*"],"imports":1}},{"name":"./server","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0},"end":{"line":6,"column":46}}],"key":"QinwpQMs5c8GY+myVdgXEzx55Tw=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.isLoaded = isLoaded;\n  exports.getLoadedFonts = getLoadedFonts;\n  exports.isLoading = isLoading;\n  exports.loadAsync = loadAsync;\n  exports.unloadAllAsync = unloadAllAsync;\n  exports.unloadAsync = unloadAsync;\n  Object.defineProperty(exports, \"FontDisplay\", {\n    enumerable: true,\n    get: function () {\n      return _FontTypes.FontDisplay;\n    }\n  });\n  var _babelRuntimeHelpersAsyncToGenerator = require(_dependencyMap[0], \"@babel/runtime/helpers/asyncToGenerator\");\n  var _asyncToGenerator = _interopDefault(_babelRuntimeHelpersAsyncToGenerator);\n  var _expoModulesCore = require(_dependencyMap[1], \"expo-modules-core\");\n  var _ExpoFontLoader = require(_dependencyMap[2], \"./ExpoFontLoader\");\n  var ExpoFontLoader = _interopDefault(_ExpoFontLoader);\n  var _FontTypes = require(_dependencyMap[3], \"./Font.types\");\n  var _FontLoader = require(_dependencyMap[4], \"./FontLoader\");\n  var _memory = require(_dependencyMap[5], \"./memory\");\n  var _server = require(_dependencyMap[6], \"./server\");\n  function isLoaded(fontFamily) {\n    if (_expoModulesCore.Platform.OS === 'web') {\n      if (typeof ExpoFontLoader.default.isLoaded !== 'function') {\n        throw new Error(`expected ExpoFontLoader.isLoaded to be a function, was ${typeof ExpoFontLoader.default.isLoaded}`);\n      }\n      return (0, _memory.isLoadedInCache)(fontFamily) || ExpoFontLoader.default.isLoaded(fontFamily);\n    }\n    return (0, _memory.isLoadedNative)(fontFamily);\n  }\n  function getLoadedFonts() {\n    return ExpoFontLoader.default.getLoadedFonts();\n  }\n  function isLoading(fontFamily) {\n    return fontFamily in _memory.loadPromises;\n  }\n  function loadAsync(fontFamilyOrFontMap, source) {\n    var isServer = _expoModulesCore.Platform.OS === 'web' && typeof window === 'undefined';\n    if (typeof fontFamilyOrFontMap === 'object') {\n      if (source) {\n        return Promise.reject(new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`));\n      }\n      var fontMap = fontFamilyOrFontMap;\n      var names = Object.keys(fontMap);\n      if (isServer) {\n        names.map(name => (0, _server.registerStaticFont)(name, fontMap[name]));\n        return Promise.resolve();\n      }\n      return Promise.all(names.map(name => loadFontInNamespaceAsync(name, fontMap[name]))).then(() => {});\n    }\n    if (isServer) {\n      (0, _server.registerStaticFont)(fontFamilyOrFontMap, source);\n      return Promise.resolve();\n    }\n    return loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n  }\n  function loadFontInNamespaceAsync(_x, _x2) {\n    return _loadFontInNamespaceAsync.apply(this, arguments);\n  }\n  function _loadFontInNamespaceAsync() {\n    _loadFontInNamespaceAsync = (0, _asyncToGenerator.default)(function* (fontFamily, source) {\n      if (!source) {\n        throw new _expoModulesCore.CodedError(`ERR_FONT_SOURCE`, `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`);\n      }\n      if (isLoaded(fontFamily)) {\n        return;\n      }\n      if (_memory.loadPromises.hasOwnProperty(fontFamily)) {\n        return _memory.loadPromises[fontFamily];\n      }\n      var asset = (0, _FontLoader.getAssetForSource)(source);\n      _memory.loadPromises[fontFamily] = (0, _asyncToGenerator.default)(function* () {\n        try {\n          yield (0, _FontLoader.loadSingleFontAsync)(fontFamily, asset);\n          (0, _memory.markLoaded)(fontFamily);\n        } finally {\n          delete _memory.loadPromises[fontFamily];\n        }\n      })();\n      yield _memory.loadPromises[fontFamily];\n    });\n    return _loadFontInNamespaceAsync.apply(this, arguments);\n  }\n  function unloadAllAsync() {\n    return _unloadAllAsync.apply(this, arguments);\n  }\n  function _unloadAllAsync() {\n    _unloadAllAsync = (0, _asyncToGenerator.default)(function* () {\n      if (!ExpoFontLoader.default.unloadAllAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAllAsync');\n      }\n      if (Object.keys(_memory.loadPromises).length) {\n        throw new _expoModulesCore.CodedError(`ERR_UNLOAD`, `Cannot unload fonts while they're still loading: ${Object.keys(_memory.loadPromises).join(', ')}`);\n      }\n      (0, _memory.purgeCache)();\n      yield ExpoFontLoader.default.unloadAllAsync();\n    });\n    return _unloadAllAsync.apply(this, arguments);\n  }\n  function unloadAsync(_x3, _x4) {\n    return _unloadAsync.apply(this, arguments);\n  }\n  function _unloadAsync() {\n    _unloadAsync = (0, _asyncToGenerator.default)(function* (fontFamilyOrFontMap, options) {\n      if (!ExpoFontLoader.default.unloadAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAsync');\n      }\n      if (typeof fontFamilyOrFontMap === 'object') {\n        if (options) {\n          throw new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`);\n        }\n        var fontMap = fontFamilyOrFontMap;\n        var names = Object.keys(fontMap);\n        yield Promise.all(names.map(name => unloadFontInNamespaceAsync(name, fontMap[name])));\n        return;\n      }\n      return yield unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n    });\n    return _unloadAsync.apply(this, arguments);\n  }\n  function unloadFontInNamespaceAsync(_x5, _x6) {\n    return _unloadFontInNamespaceAsync.apply(this, arguments);\n  }\n  function _unloadFontInNamespaceAsync() {\n    _unloadFontInNamespaceAsync = (0, _asyncToGenerator.default)(function* (fontFamily, options) {\n      if (!isLoaded(fontFamily)) {\n        return;\n      } else {\n        (0, _memory.purgeFontFamilyFromCache)(fontFamily);\n      }\n      if (!fontFamily) {\n        throw new _expoModulesCore.CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n      }\n      if (!ExpoFontLoader.default.unloadAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAsync');\n      }\n      yield ExpoFontLoader.default.unloadAsync(fontFamily, options);\n    });\n    return _unloadFontInNamespaceAsync.apply(this, arguments);\n  }\n});","lineCount":152,"map":[[12,2,14,0,"exports"],[12,9,14,0],[12,10,14,0,"isLoaded"],[12,18,14,0],[12,21,14,0,"isLoaded"],[12,29,14,0],[13,2,29,0,"exports"],[13,9,29,0],[13,10,29,0,"getLoadedFonts"],[13,24,29,0],[13,27,29,0,"getLoadedFonts"],[13,41,29,0],[14,2,39,0,"exports"],[14,9,39,0],[14,10,39,0,"isLoading"],[14,19,39,0],[14,22,39,0,"isLoading"],[14,31,39,0],[15,2,57,0,"exports"],[15,9,57,0],[15,10,57,0,"loadAsync"],[15,19,57,0],[15,22,57,0,"loadAsync"],[15,31,57,0],[16,2,113,0,"exports"],[16,9,113,0],[16,10,113,0,"unloadAllAsync"],[16,24,113,0],[16,27,113,0,"unloadAllAsync"],[16,41,113,0],[17,2,133,0,"exports"],[17,9,133,0],[17,10,133,0,"unloadAsync"],[17,21,133,0],[17,24,133,0,"unloadAsync"],[17,35,133,0],[18,2,167,0,"Object"],[18,8,167,0],[18,9,167,0,"defineProperty"],[18,23,167,0],[18,24,167,0,"exports"],[18,31,167,0],[19,4,167,0,"enumerable"],[19,14,167,0],[20,4,167,0,"get"],[20,7,167,0],[20,18,167,0,"get"],[20,19,167,0],[21,6,167,0],[21,13,167,9,"FontDisplay"],[21,23,167,20],[21,24,167,20,"FontDisplay"],[21,35,167,20],[22,4,167,20],[23,2,167,20],[24,2,167,23],[24,6,167,23,"_babelRuntimeHelpersAsyncToGenerator"],[24,42,167,23],[24,45,167,23,"require"],[24,52,167,23],[24,53,167,23,"_dependencyMap"],[24,67,167,23],[25,2,167,23],[25,6,167,23,"_asyncToGenerator"],[25,23,167,23],[25,26,167,23,"_interopDefault"],[25,41,167,23],[25,42,167,23,"_babelRuntimeHelpersAsyncToGenerator"],[25,78,167,23],[26,2,1,0],[26,6,1,0,"_expoModulesCore"],[26,22,1,0],[26,25,1,0,"require"],[26,32,1,0],[26,33,1,0,"_dependencyMap"],[26,47,1,0],[27,2,2,0],[27,6,2,0,"_ExpoFontLoader"],[27,21,2,0],[27,24,2,0,"require"],[27,31,2,0],[27,32,2,0,"_dependencyMap"],[27,46,2,0],[28,2,2,0],[28,6,2,0,"ExpoFontLoader"],[28,20,2,0],[28,23,2,0,"_interopDefault"],[28,38,2,0],[28,39,2,0,"_ExpoFontLoader"],[28,54,2,0],[29,2,3,0],[29,6,3,0,"_FontTypes"],[29,16,3,0],[29,19,3,0,"require"],[29,26,3,0],[29,27,3,0,"_dependencyMap"],[29,41,3,0],[30,2,4,0],[30,6,4,0,"_FontLoader"],[30,17,4,0],[30,20,4,0,"require"],[30,27,4,0],[30,28,4,0,"_dependencyMap"],[30,42,4,0],[31,2,5,0],[31,6,5,0,"_memory"],[31,13,5,0],[31,16,5,0,"require"],[31,23,5,0],[31,24,5,0,"_dependencyMap"],[31,38,5,0],[32,2,6,0],[32,6,6,0,"_server"],[32,13,6,0],[32,16,6,0,"require"],[32,23,6,0],[32,24,6,0,"_dependencyMap"],[32,38,6,0],[33,2,14,7],[33,11,14,16,"isLoaded"],[33,19,14,24,"isLoaded"],[33,20,14,25,"fontFamily"],[33,30,14,35],[33,32,14,37],[34,4,15,4],[34,8,15,8,"Platform"],[34,24,15,16],[34,25,15,16,"Platform"],[34,33,15,16],[34,34,15,17,"OS"],[34,36,15,19],[34,41,15,24],[34,46,15,29],[34,48,15,31],[35,6,16,8],[35,10,16,12],[35,17,16,19,"ExpoFontLoader"],[35,31,16,33],[35,32,16,33,"default"],[35,39,16,33],[35,40,16,34,"isLoaded"],[35,48,16,42],[35,53,16,47],[35,63,16,57],[35,65,16,59],[36,8,17,12],[36,14,17,18],[36,18,17,22,"Error"],[36,23,17,27],[36,24,17,28],[36,82,17,86],[36,89,17,93,"ExpoFontLoader"],[36,103,17,107],[36,104,17,107,"default"],[36,111,17,107],[36,112,17,108,"isLoaded"],[36,120,17,116],[36,122,17,118],[36,123,17,119],[37,6,18,8],[38,6,19,8],[38,13,19,15],[38,17,19,15,"isLoadedInCache"],[38,24,19,30],[38,25,19,30,"isLoadedInCache"],[38,40,19,30],[38,42,19,31,"fontFamily"],[38,52,19,41],[38,53,19,42],[38,57,19,46,"ExpoFontLoader"],[38,71,19,60],[38,72,19,60,"default"],[38,79,19,60],[38,80,19,61,"isLoaded"],[38,88,19,69],[38,89,19,70,"fontFamily"],[38,99,19,80],[38,100,19,81],[39,4,20,4],[40,4,21,4],[40,11,21,11],[40,15,21,11,"isLoadedNative"],[40,22,21,25],[40,23,21,25,"isLoadedNative"],[40,37,21,25],[40,39,21,26,"fontFamily"],[40,49,21,36],[40,50,21,37],[41,2,22,0],[42,2,29,7],[42,11,29,16,"getLoadedFonts"],[42,25,29,30,"getLoadedFonts"],[42,26,29,30],[42,28,29,33],[43,4,30,4],[43,11,30,11,"ExpoFontLoader"],[43,25,30,25],[43,26,30,25,"default"],[43,33,30,25],[43,34,30,26,"getLoadedFonts"],[43,48,30,40],[43,49,30,41],[43,50,30,42],[44,2,31,0],[45,2,39,7],[45,11,39,16,"isLoading"],[45,20,39,25,"isLoading"],[45,21,39,26,"fontFamily"],[45,31,39,36],[45,33,39,38],[46,4,40,4],[46,11,40,11,"fontFamily"],[46,21,40,21],[46,25,40,25,"loadPromises"],[46,32,40,37],[46,33,40,37,"loadPromises"],[46,45,40,37],[47,2,41,0],[48,2,57,7],[48,11,57,16,"loadAsync"],[48,20,57,25,"loadAsync"],[48,21,57,26,"fontFamilyOrFontMap"],[48,40,57,45],[48,42,57,47,"source"],[48,48,57,53],[48,50,57,55],[49,4,61,4],[49,8,61,10,"isServer"],[49,16,61,18],[49,19,61,21,"Platform"],[49,35,61,29],[49,36,61,29,"Platform"],[49,44,61,29],[49,45,61,30,"OS"],[49,47,61,32],[49,52,61,37],[49,57,61,42],[49,61,61,46],[49,68,61,53,"window"],[49,74,61,59],[49,79,61,64],[49,90,61,75],[50,4,62,4],[50,8,62,8],[50,15,62,15,"fontFamilyOrFontMap"],[50,34,62,34],[50,39,62,39],[50,47,62,47],[50,49,62,49],[51,6,63,8],[51,10,63,12,"source"],[51,16,63,18],[51,18,63,20],[52,8,64,12],[52,15,64,19,"Promise"],[52,22,64,26],[52,23,64,27,"reject"],[52,29,64,33],[52,30,64,34],[52,34,64,38,"CodedError"],[52,50,64,48],[52,51,64,48,"CodedError"],[52,61,64,48],[52,62,64,49],[52,76,64,63],[52,78,64,65],[52,132,64,119,"source"],[52,138,64,125],[52,244,64,231],[52,245,64,232],[52,246,64,233],[53,6,65,8],[54,6,66,8],[54,10,66,14,"fontMap"],[54,17,66,21],[54,20,66,24,"fontFamilyOrFontMap"],[54,39,66,43],[55,6,67,8],[55,10,67,14,"names"],[55,15,67,19],[55,18,67,22,"Object"],[55,24,67,28],[55,25,67,29,"keys"],[55,29,67,33],[55,30,67,34,"fontMap"],[55,37,67,41],[55,38,67,42],[56,6,68,8],[56,10,68,12,"isServer"],[56,18,68,20],[56,20,68,22],[57,8,69,12,"names"],[57,13,69,17],[57,14,69,18,"map"],[57,17,69,21],[57,18,69,23,"name"],[57,22,69,27],[57,26,69,32],[57,30,69,32,"registerStaticFont"],[57,37,69,50],[57,38,69,50,"registerStaticFont"],[57,56,69,50],[57,58,69,51,"name"],[57,62,69,55],[57,64,69,57,"fontMap"],[57,71,69,64],[57,72,69,65,"name"],[57,76,69,69],[57,77,69,70],[57,78,69,71],[57,79,69,72],[58,8,70,12],[58,15,70,19,"Promise"],[58,22,70,26],[58,23,70,27,"resolve"],[58,30,70,34],[58,31,70,35],[58,32,70,36],[59,6,71,8],[60,6,72,8],[60,13,72,15,"Promise"],[60,20,72,22],[60,21,72,23,"all"],[60,24,72,26],[60,25,72,27,"names"],[60,30,72,32],[60,31,72,33,"map"],[60,34,72,36],[60,35,72,38,"name"],[60,39,72,42],[60,43,72,47,"loadFontInNamespaceAsync"],[60,67,72,71],[60,68,72,72,"name"],[60,72,72,76],[60,74,72,78,"fontMap"],[60,81,72,85],[60,82,72,86,"name"],[60,86,72,90],[60,87,72,91],[60,88,72,92],[60,89,72,93],[60,90,72,94],[60,91,72,95,"then"],[60,95,72,99],[60,96,72,100],[60,102,72,106],[60,103,72,108],[60,104,72,109],[60,105,72,110],[61,4,73,4],[62,4,74,4],[62,8,74,8,"isServer"],[62,16,74,16],[62,18,74,18],[63,6,75,8],[63,10,75,8,"registerStaticFont"],[63,17,75,26],[63,18,75,26,"registerStaticFont"],[63,36,75,26],[63,38,75,27,"fontFamilyOrFontMap"],[63,57,75,46],[63,59,75,48,"source"],[63,65,75,54],[63,66,75,55],[64,6,76,8],[64,13,76,15,"Promise"],[64,20,76,22],[64,21,76,23,"resolve"],[64,28,76,30],[64,29,76,31],[64,30,76,32],[65,4,77,4],[66,4,78,4],[66,11,78,11,"loadFontInNamespaceAsync"],[66,35,78,35],[66,36,78,36,"fontFamilyOrFontMap"],[66,55,78,55],[66,57,78,57,"source"],[66,63,78,63],[66,64,78,64],[67,2,79,0],[68,2,79,1],[68,11,80,15,"loadFontInNamespaceAsync"],[68,35,80,39,"loadFontInNamespaceAsync"],[68,36,80,39,"_x"],[68,38,80,39],[68,40,80,39,"_x2"],[68,43,80,39],[69,4,80,39],[69,11,80,39,"_loadFontInNamespaceAsync"],[69,36,80,39],[69,37,80,39,"apply"],[69,42,80,39],[69,49,80,39,"arguments"],[69,58,80,39],[70,2,80,39],[71,2,80,39],[71,11,80,39,"_loadFontInNamespaceAsync"],[71,37,80,39],[72,4,80,39,"_loadFontInNamespaceAsync"],[72,29,80,39],[72,36,80,39,"_asyncToGenerator"],[72,53,80,39],[72,54,80,39,"default"],[72,61,80,39],[72,63,80,0],[72,74,80,40,"fontFamily"],[72,84,80,50],[72,86,80,52,"source"],[72,92,80,58],[72,94,80,60],[73,6,81,4],[73,10,81,8],[73,11,81,9,"source"],[73,17,81,15],[73,19,81,17],[74,8,82,8],[74,14,82,14],[74,18,82,18,"CodedError"],[74,34,82,28],[74,35,82,28,"CodedError"],[74,45,82,28],[74,46,82,29],[74,63,82,46],[74,65,82,48],[74,114,82,97,"fontFamily"],[74,124,82,107],[74,130,82,113,"source"],[74,136,82,119],[74,206,82,189,"fontFamily"],[74,216,82,199],[74,219,82,202],[74,220,82,203],[75,6,83,4],[76,6,86,4],[76,10,86,8,"isLoaded"],[76,18,86,16],[76,19,86,17,"fontFamily"],[76,29,86,27],[76,30,86,28],[76,32,86,30],[77,8,87,8],[78,6,88,4],[79,6,89,4],[79,10,89,8,"loadPromises"],[79,17,89,20],[79,18,89,20,"loadPromises"],[79,30,89,20],[79,31,89,21,"hasOwnProperty"],[79,45,89,35],[79,46,89,36,"fontFamily"],[79,56,89,46],[79,57,89,47],[79,59,89,49],[80,8,90,8],[80,15,90,15,"loadPromises"],[80,22,90,27],[80,23,90,27,"loadPromises"],[80,35,90,27],[80,36,90,28,"fontFamily"],[80,46,90,38],[80,47,90,39],[81,6,91,4],[82,6,96,4],[82,10,96,10,"asset"],[82,15,96,15],[82,18,96,18],[82,22,96,18,"getAssetForSource"],[82,33,96,35],[82,34,96,35,"getAssetForSource"],[82,51,96,35],[82,53,96,36,"source"],[82,59,96,42],[82,60,96,43],[83,6,97,4,"loadPromises"],[83,13,97,16],[83,14,97,16,"loadPromises"],[83,26,97,16],[83,27,97,17,"fontFamily"],[83,37,97,27],[83,38,97,28],[83,41,97,31],[83,45,97,31,"_asyncToGenerator"],[83,62,97,31],[83,63,97,31,"default"],[83,70,97,31],[83,72,97,32],[83,85,97,44],[84,8,98,8],[84,12,98,12],[85,10,99,12],[85,16,99,18],[85,20,99,18,"loadSingleFontAsync"],[85,31,99,37],[85,32,99,37,"loadSingleFontAsync"],[85,51,99,37],[85,53,99,38,"fontFamily"],[85,63,99,48],[85,65,99,50,"asset"],[85,70,99,55],[85,71,99,56],[86,10,100,12],[86,14,100,12,"markLoaded"],[86,21,100,22],[86,22,100,22,"markLoaded"],[86,32,100,22],[86,34,100,23,"fontFamily"],[86,44,100,33],[86,45,100,34],[87,8,101,8],[87,9,101,9],[87,18,102,16],[88,10,103,12],[88,17,103,19,"loadPromises"],[88,24,103,31],[88,25,103,31,"loadPromises"],[88,37,103,31],[88,38,103,32,"fontFamily"],[88,48,103,42],[88,49,103,43],[89,8,104,8],[90,6,105,4],[90,7,105,5],[90,9,105,7],[90,10,105,8],[91,6,106,4],[91,12,106,10,"loadPromises"],[91,19,106,22],[91,20,106,22,"loadPromises"],[91,32,106,22],[91,33,106,23,"fontFamily"],[91,43,106,33],[91,44,106,34],[92,4,107,0],[92,5,107,1],[93,4,107,1],[93,11,107,1,"_loadFontInNamespaceAsync"],[93,36,107,1],[93,37,107,1,"apply"],[93,42,107,1],[93,49,107,1,"arguments"],[93,58,107,1],[94,2,107,1],[95,2,107,1],[95,11,113,22,"unloadAllAsync"],[95,25,113,36,"unloadAllAsync"],[95,26,113,36],[96,4,113,36],[96,11,113,36,"_unloadAllAsync"],[96,26,113,36],[96,27,113,36,"apply"],[96,32,113,36],[96,39,113,36,"arguments"],[96,48,113,36],[97,2,113,36],[98,2,113,36],[98,11,113,36,"_unloadAllAsync"],[98,27,113,36],[99,4,113,36,"_unloadAllAsync"],[99,19,113,36],[99,26,113,36,"_asyncToGenerator"],[99,43,113,36],[99,44,113,36,"default"],[99,51,113,36],[99,53,113,7],[99,66,113,39],[100,6,114,4],[100,10,114,8],[100,11,114,9,"ExpoFontLoader"],[100,25,114,23],[100,26,114,23,"default"],[100,33,114,23],[100,34,114,24,"unloadAllAsync"],[100,48,114,38],[100,50,114,40],[101,8,115,8],[101,14,115,14],[101,18,115,18,"UnavailabilityError"],[101,34,115,37],[101,35,115,37,"UnavailabilityError"],[101,54,115,37],[101,55,115,38],[101,66,115,49],[101,68,115,51],[101,84,115,67],[101,85,115,68],[102,6,116,4],[103,6,117,4],[103,10,117,8,"Object"],[103,16,117,14],[103,17,117,15,"keys"],[103,21,117,19],[103,22,117,20,"loadPromises"],[103,29,117,32],[103,30,117,32,"loadPromises"],[103,42,117,32],[103,43,117,33],[103,44,117,34,"length"],[103,50,117,40],[103,52,117,42],[104,8,118,8],[104,14,118,14],[104,18,118,18,"CodedError"],[104,34,118,28],[104,35,118,28,"CodedError"],[104,45,118,28],[104,46,118,29],[104,58,118,41],[104,60,118,43],[104,112,118,95,"Object"],[104,118,118,101],[104,119,118,102,"keys"],[104,123,118,106],[104,124,118,107,"loadPromises"],[104,131,118,119],[104,132,118,119,"loadPromises"],[104,144,118,119],[104,145,118,120],[104,146,118,121,"join"],[104,150,118,125],[104,151,118,126],[104,155,118,130],[104,156,118,131],[104,158,118,133],[104,159,118,134],[105,6,119,4],[106,6,120,4],[106,10,120,4,"purgeCache"],[106,17,120,14],[106,18,120,14,"purgeCache"],[106,28,120,14],[106,30,120,15],[106,31,120,16],[107,6,121,4],[107,12,121,10,"ExpoFontLoader"],[107,26,121,24],[107,27,121,24,"default"],[107,34,121,24],[107,35,121,25,"unloadAllAsync"],[107,49,121,39],[107,50,121,40],[107,51,121,41],[108,4,122,0],[108,5,122,1],[109,4,122,1],[109,11,122,1,"_unloadAllAsync"],[109,26,122,1],[109,27,122,1,"apply"],[109,32,122,1],[109,39,122,1,"arguments"],[109,48,122,1],[110,2,122,1],[111,2,122,1],[111,11,133,22,"unloadAsync"],[111,22,133,33,"unloadAsync"],[111,23,133,33,"_x3"],[111,26,133,33],[111,28,133,33,"_x4"],[111,31,133,33],[112,4,133,33],[112,11,133,33,"_unloadAsync"],[112,23,133,33],[112,24,133,33,"apply"],[112,29,133,33],[112,36,133,33,"arguments"],[112,45,133,33],[113,2,133,33],[114,2,133,33],[114,11,133,33,"_unloadAsync"],[114,24,133,33],[115,4,133,33,"_unloadAsync"],[115,16,133,33],[115,23,133,33,"_asyncToGenerator"],[115,40,133,33],[115,41,133,33,"default"],[115,48,133,33],[115,50,133,7],[115,61,133,34,"fontFamilyOrFontMap"],[115,80,133,53],[115,82,133,55,"options"],[115,89,133,62],[115,91,133,64],[116,6,134,4],[116,10,134,8],[116,11,134,9,"ExpoFontLoader"],[116,25,134,23],[116,26,134,23,"default"],[116,33,134,23],[116,34,134,24,"unloadAsync"],[116,45,134,35],[116,47,134,37],[117,8,135,8],[117,14,135,14],[117,18,135,18,"UnavailabilityError"],[117,34,135,37],[117,35,135,37,"UnavailabilityError"],[117,54,135,37],[117,55,135,38],[117,66,135,49],[117,68,135,51],[117,81,135,64],[117,82,135,65],[118,6,136,4],[119,6,137,4],[119,10,137,8],[119,17,137,15,"fontFamilyOrFontMap"],[119,36,137,34],[119,41,137,39],[119,49,137,47],[119,51,137,49],[120,8,138,8],[120,12,138,12,"options"],[120,19,138,19],[120,21,138,21],[121,10,139,12],[121,16,139,18],[121,20,139,22,"CodedError"],[121,36,139,32],[121,37,139,32,"CodedError"],[121,47,139,32],[121,48,139,33],[121,62,139,47],[121,64,139,49],[121,119,139,104,"options"],[121,126,139,111],[121,234,139,219],[121,235,139,220],[122,8,140,8],[123,8,141,8],[123,12,141,14,"fontMap"],[123,19,141,21],[123,22,141,24,"fontFamilyOrFontMap"],[123,41,141,43],[124,8,142,8],[124,12,142,14,"names"],[124,17,142,19],[124,20,142,22,"Object"],[124,26,142,28],[124,27,142,29,"keys"],[124,31,142,33],[124,32,142,34,"fontMap"],[124,39,142,41],[124,40,142,42],[125,8,143,8],[125,14,143,14,"Promise"],[125,21,143,21],[125,22,143,22,"all"],[125,25,143,25],[125,26,143,26,"names"],[125,31,143,31],[125,32,143,32,"map"],[125,35,143,35],[125,36,143,37,"name"],[125,40,143,41],[125,44,143,46,"unloadFontInNamespaceAsync"],[125,70,143,72],[125,71,143,73,"name"],[125,75,143,77],[125,77,143,79,"fontMap"],[125,84,143,86],[125,85,143,87,"name"],[125,89,143,91],[125,90,143,92],[125,91,143,93],[125,92,143,94],[125,93,143,95],[126,8,144,8],[127,6,145,4],[128,6,146,4],[128,19,146,17,"unloadFontInNamespaceAsync"],[128,45,146,43],[128,46,146,44,"fontFamilyOrFontMap"],[128,65,146,63],[128,67,146,65,"options"],[128,74,146,72],[128,75,146,73],[129,4,147,0],[129,5,147,1],[130,4,147,1],[130,11,147,1,"_unloadAsync"],[130,23,147,1],[130,24,147,1,"apply"],[130,29,147,1],[130,36,147,1,"arguments"],[130,45,147,1],[131,2,147,1],[132,2,147,1],[132,11,148,15,"unloadFontInNamespaceAsync"],[132,37,148,41,"unloadFontInNamespaceAsync"],[132,38,148,41,"_x5"],[132,41,148,41],[132,43,148,41,"_x6"],[132,46,148,41],[133,4,148,41],[133,11,148,41,"_unloadFontInNamespaceAsync"],[133,38,148,41],[133,39,148,41,"apply"],[133,44,148,41],[133,51,148,41,"arguments"],[133,60,148,41],[134,2,148,41],[135,2,148,41],[135,11,148,41,"_unloadFontInNamespaceAsync"],[135,39,148,41],[136,4,148,41,"_unloadFontInNamespaceAsync"],[136,31,148,41],[136,38,148,41,"_asyncToGenerator"],[136,55,148,41],[136,56,148,41,"default"],[136,63,148,41],[136,65,148,0],[136,76,148,42,"fontFamily"],[136,86,148,52],[136,88,148,54,"options"],[136,95,148,61],[136,97,148,63],[137,6,149,4],[137,10,149,8],[137,11,149,9,"isLoaded"],[137,19,149,17],[137,20,149,18,"fontFamily"],[137,30,149,28],[137,31,149,29],[137,33,149,31],[138,8,150,8],[139,6,151,4],[139,7,151,5],[139,13,152,9],[140,8,153,8],[140,12,153,8,"purgeFontFamilyFromCache"],[140,19,153,32],[140,20,153,32,"purgeFontFamilyFromCache"],[140,44,153,32],[140,46,153,33,"fontFamily"],[140,56,153,43],[140,57,153,44],[141,6,154,4],[142,6,159,4],[142,10,159,8],[142,11,159,9,"fontFamily"],[142,21,159,19],[142,23,159,21],[143,8,160,8],[143,14,160,14],[143,18,160,18,"CodedError"],[143,34,160,28],[143,35,160,28,"CodedError"],[143,45,160,28],[143,46,160,29],[143,63,160,46],[143,65,160,48],[143,94,160,77],[143,95,160,78],[144,6,161,4],[145,6,162,4],[145,10,162,8],[145,11,162,9,"ExpoFontLoader"],[145,25,162,23],[145,26,162,23,"default"],[145,33,162,23],[145,34,162,24,"unloadAsync"],[145,45,162,35],[145,47,162,37],[146,8,163,8],[146,14,163,14],[146,18,163,18,"UnavailabilityError"],[146,34,163,37],[146,35,163,37,"UnavailabilityError"],[146,54,163,37],[146,55,163,38],[146,66,163,49],[146,68,163,51],[146,81,163,64],[146,82,163,65],[147,6,164,4],[148,6,165,4],[148,12,165,10,"ExpoFontLoader"],[148,26,165,24],[148,27,165,24,"default"],[148,34,165,24],[148,35,165,25,"unloadAsync"],[148,46,165,36],[148,47,165,37,"fontFamily"],[148,57,165,47],[148,59,165,49,"options"],[148,66,165,56],[148,67,165,57],[149,4,166,0],[149,5,166,1],[150,4,166,1],[150,11,166,1,"_unloadFontInNamespaceAsync"],[150,38,166,1],[150,39,166,1,"apply"],[150,44,166,1],[150,51,166,1,"arguments"],[150,60,166,1],[151,2,166,1],[152,0,166,1],[152,3]],"functionMap":{"names":["<global>","isLoaded","getLoadedFonts","isLoading","loadAsync","names.map$argument_0","Promise.all.then$argument_0","loadFontInNamespaceAsync","<anonymous>","unloadAllAsync","unloadAsync","unloadFontInNamespaceAsync"],"mappings":"AAA;OCa;CDQ;OEO;CFE;OGQ;CHE;OIgB;sBCY,iDD;qCCG,uDD,QE,SF;CJO;AOC;gCCiB;KDQ;CPE;OSM;CTS;OUW;oCLU,yDK;CVI;AWC;CXkB"},"hasCjsExports":false},"type":"js/module"}]}