{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.getPatternParts = getPatternParts;\n  var _babelRuntimeHelpersSlicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  var _slicedToArray = _interopDefault(_babelRuntimeHelpersSlicedToArray);\n  function getPatternParts(path) {\n    var parts = [];\n    var current = {\n      segment: ''\n    };\n    var isRegex = false;\n    var isParam = false;\n    var regexInnerParens = 0;\n    for (var i = 0; i <= path.length; i++) {\n      var char = path[i];\n      if (char != null) {\n        current.segment += char;\n      }\n      if (char === ':') {\n        if (current.segment === ':') {\n          isParam = true;\n        } else if (!isRegex) {\n          throw new Error(`Encountered ':' in the middle of a segment in path: ${path}`);\n        }\n      } else if (char === '(') {\n        if (isParam) {\n          if (isRegex) {\n            regexInnerParens++;\n          } else {\n            isRegex = true;\n          }\n        } else {\n          throw new Error(`Encountered '(' without preceding ':' in path: ${path}`);\n        }\n      } else if (char === ')') {\n        if (isParam && isRegex) {\n          if (regexInnerParens) {\n            regexInnerParens--;\n            current.regex += char;\n          } else {\n            isRegex = false;\n            isParam = false;\n          }\n        } else {\n          throw new Error(`Encountered ')' without preceding '(' in path: ${path}`);\n        }\n      } else if (char === '?') {\n        if (current.param) {\n          isParam = false;\n          current.optional = true;\n        } else {\n          throw new Error(`Encountered '?' without preceding ':' in path: ${path}`);\n        }\n      } else if (char == null || char === '/' && !isRegex) {\n        isParam = false;\n        current.segment = current.segment.replace(/\\/$/, '');\n        if (current.segment === '') {\n          continue;\n        }\n        if (current.param) {\n          current.param = current.param.replace(/^:/, '');\n        }\n        if (current.regex) {\n          current.regex = current.regex.replace(/^\\(/, '').replace(/\\)$/, '');\n        }\n        parts.push(current);\n        if (char == null) {\n          break;\n        }\n        current = {\n          segment: ''\n        };\n      }\n      if (isRegex) {\n        current.regex = current.regex || '';\n        current.regex += char;\n      }\n      if (isParam && !isRegex) {\n        current.param = current.param || '';\n        current.param += char;\n      }\n    }\n    if (isRegex) {\n      throw new Error(`Could not find closing ')' in path: ${path}`);\n    }\n    var params = parts.map(part => part.param).filter(Boolean);\n    for (var _ref of params.entries()) {\n      var _ref2 = (0, _slicedToArray.default)(_ref, 2);\n      var index = _ref2[0];\n      var param = _ref2[1];\n      if (params.indexOf(param) !== index) {\n        throw new Error(`Duplicate param name '${param}' found in path: ${path}`);\n      }\n    }\n    return parts;\n  }\n});","lineCount":106,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,1,13],[7,11,1,13,"_interopDefault"],[7,27,1,13,"e"],[7,28,1,13],[8,4,1,13],[8,11,1,13,"e"],[8,12,1,13],[8,16,1,13,"e"],[8,17,1,13],[8,18,1,13,"__esModule"],[8,28,1,13],[8,31,1,13,"e"],[8,32,1,13],[9,6,1,13,"default"],[9,13,1,13],[9,15,1,13,"e"],[10,4,1,13],[11,2,1,13],[12,2,6,0,"exports"],[12,9,6,0],[12,10,6,0,"getPatternParts"],[12,25,6,0],[12,28,6,0,"getPatternParts"],[12,43,6,0],[13,2,100,1],[13,6,100,1,"_babelRuntimeHelpersSlicedToArray"],[13,39,100,1],[13,42,100,1,"require"],[13,49,100,1],[13,50,100,1,"_dependencyMap"],[13,64,100,1],[14,2,100,1],[14,6,100,1,"_slicedToArray"],[14,20,100,1],[14,23,100,1,"_interopDefault"],[14,38,100,1],[14,39,100,1,"_babelRuntimeHelpersSlicedToArray"],[14,72,100,1],[15,2,6,7],[15,11,6,16,"getPatternParts"],[15,26,6,31,"getPatternParts"],[15,27,6,32,"path"],[15,31,6,36],[15,33,6,38],[16,4,7,2],[16,8,7,8,"parts"],[16,13,7,13],[16,16,7,16],[16,18,7,18],[17,4,8,2],[17,8,8,6,"current"],[17,15,8,13],[17,18,8,16],[18,6,9,4,"segment"],[18,13,9,11],[18,15,9,13],[19,4,10,2],[19,5,10,3],[20,4,11,2],[20,8,11,6,"isRegex"],[20,15,11,13],[20,18,11,16],[20,23,11,21],[21,4,12,2],[21,8,12,6,"isParam"],[21,15,12,13],[21,18,12,16],[21,23,12,21],[22,4,13,2],[22,8,13,6,"regexInnerParens"],[22,24,13,22],[22,27,13,25],[22,28,13,26],[23,4,16,2],[23,9,16,7],[23,13,16,11,"i"],[23,14,16,12],[23,17,16,15],[23,18,16,16],[23,20,16,18,"i"],[23,21,16,19],[23,25,16,23,"path"],[23,29,16,27],[23,30,16,28,"length"],[23,36,16,34],[23,38,16,36,"i"],[23,39,16,37],[23,41,16,39],[23,43,16,41],[24,6,17,4],[24,10,17,10,"char"],[24,14,17,14],[24,17,17,17,"path"],[24,21,17,21],[24,22,17,22,"i"],[24,23,17,23],[24,24,17,24],[25,6,18,4],[25,10,18,8,"char"],[25,14,18,12],[25,18,18,16],[25,22,18,20],[25,24,18,22],[26,8,19,6,"current"],[26,15,19,13],[26,16,19,14,"segment"],[26,23,19,21],[26,27,19,25,"char"],[26,31,19,29],[27,6,20,4],[28,6,21,4],[28,10,21,8,"char"],[28,14,21,12],[28,19,21,17],[28,22,21,20],[28,24,21,22],[29,8,23,6],[29,12,23,10,"current"],[29,19,23,17],[29,20,23,18,"segment"],[29,27,23,25],[29,32,23,30],[29,35,23,33],[29,37,23,35],[30,10,24,8,"isParam"],[30,17,24,15],[30,20,24,18],[30,24,24,22],[31,8,25,6],[31,9,25,7],[31,15,25,13],[31,19,25,17],[31,20,25,18,"isRegex"],[31,27,25,25],[31,29,25,27],[32,10,26,8],[32,16,26,14],[32,20,26,18,"Error"],[32,25,26,23],[32,26,26,24],[32,81,26,79,"path"],[32,85,26,83],[32,87,26,85],[32,88,26,86],[33,8,27,6],[34,6,28,4],[34,7,28,5],[34,13,28,11],[34,17,28,15,"char"],[34,21,28,19],[34,26,28,24],[34,29,28,27],[34,31,28,29],[35,8,29,6],[35,12,29,10,"isParam"],[35,19,29,17],[35,21,29,19],[36,10,30,8],[36,14,30,12,"isRegex"],[36,21,30,19],[36,23,30,21],[37,12,32,10,"regexInnerParens"],[37,28,32,26],[37,30,32,28],[38,10,33,8],[38,11,33,9],[38,17,33,15],[39,12,34,10,"isRegex"],[39,19,34,17],[39,22,34,20],[39,26,34,24],[40,10,35,8],[41,8,36,6],[41,9,36,7],[41,15,36,13],[42,10,37,8],[42,16,37,14],[42,20,37,18,"Error"],[42,25,37,23],[42,26,37,24],[42,76,37,74,"path"],[42,80,37,78],[42,82,37,80],[42,83,37,81],[43,8,38,6],[44,6,39,4],[44,7,39,5],[44,13,39,11],[44,17,39,15,"char"],[44,21,39,19],[44,26,39,24],[44,29,39,27],[44,31,39,29],[45,8,40,6],[45,12,40,10,"isParam"],[45,19,40,17],[45,23,40,21,"isRegex"],[45,30,40,28],[45,32,40,30],[46,10,41,8],[46,14,41,12,"regexInnerParens"],[46,30,41,28],[46,32,41,30],[47,12,43,10,"regexInnerParens"],[47,28,43,26],[47,30,43,28],[48,12,44,10,"current"],[48,19,44,17],[48,20,44,18,"regex"],[48,25,44,23],[48,29,44,27,"char"],[48,33,44,31],[49,10,45,8],[49,11,45,9],[49,17,45,15],[50,12,46,10,"isRegex"],[50,19,46,17],[50,22,46,20],[50,27,46,25],[51,12,47,10,"isParam"],[51,19,47,17],[51,22,47,20],[51,27,47,25],[52,10,48,8],[53,8,49,6],[53,9,49,7],[53,15,49,13],[54,10,50,8],[54,16,50,14],[54,20,50,18,"Error"],[54,25,50,23],[54,26,50,24],[54,76,50,74,"path"],[54,80,50,78],[54,82,50,80],[54,83,50,81],[55,8,51,6],[56,6,52,4],[56,7,52,5],[56,13,52,11],[56,17,52,15,"char"],[56,21,52,19],[56,26,52,24],[56,29,52,27],[56,31,52,29],[57,8,53,6],[57,12,53,10,"current"],[57,19,53,17],[57,20,53,18,"param"],[57,25,53,23],[57,27,53,25],[58,10,54,8,"isParam"],[58,17,54,15],[58,20,54,18],[58,25,54,23],[59,10,55,8,"current"],[59,17,55,15],[59,18,55,16,"optional"],[59,26,55,24],[59,29,55,27],[59,33,55,31],[60,8,56,6],[60,9,56,7],[60,15,56,13],[61,10,57,8],[61,16,57,14],[61,20,57,18,"Error"],[61,25,57,23],[61,26,57,24],[61,76,57,74,"path"],[61,80,57,78],[61,82,57,80],[61,83,57,81],[62,8,58,6],[63,6,59,4],[63,7,59,5],[63,13,59,11],[63,17,59,15,"char"],[63,21,59,19],[63,25,59,23],[63,29,59,27],[63,33,59,31,"char"],[63,37,59,35],[63,42,59,40],[63,45,59,43],[63,49,59,47],[63,50,59,48,"isRegex"],[63,57,59,55],[63,59,59,57],[64,8,60,6,"isParam"],[64,15,60,13],[64,18,60,16],[64,23,60,21],[65,8,63,6,"current"],[65,15,63,13],[65,16,63,14,"segment"],[65,23,63,21],[65,26,63,24,"current"],[65,33,63,31],[65,34,63,32,"segment"],[65,41,63,39],[65,42,63,40,"replace"],[65,49,63,47],[65,50,63,48],[65,55,63,53],[65,57,63,55],[65,59,63,57],[65,60,63,58],[66,8,64,6],[66,12,64,10,"current"],[66,19,64,17],[66,20,64,18,"segment"],[66,27,64,25],[66,32,64,30],[66,34,64,32],[66,36,64,34],[67,10,65,8],[68,8,66,6],[69,8,67,6],[69,12,67,10,"current"],[69,19,67,17],[69,20,67,18,"param"],[69,25,67,23],[69,27,67,25],[70,10,68,8,"current"],[70,17,68,15],[70,18,68,16,"param"],[70,23,68,21],[70,26,68,24,"current"],[70,33,68,31],[70,34,68,32,"param"],[70,39,68,37],[70,40,68,38,"replace"],[70,47,68,45],[70,48,68,46],[70,52,68,50],[70,54,68,52],[70,56,68,54],[70,57,68,55],[71,8,69,6],[72,8,70,6],[72,12,70,10,"current"],[72,19,70,17],[72,20,70,18,"regex"],[72,25,70,23],[72,27,70,25],[73,10,71,8,"current"],[73,17,71,15],[73,18,71,16,"regex"],[73,23,71,21],[73,26,71,24,"current"],[73,33,71,31],[73,34,71,32,"regex"],[73,39,71,37],[73,40,71,38,"replace"],[73,47,71,45],[73,48,71,46],[73,53,71,51],[73,55,71,53],[73,57,71,55],[73,58,71,56],[73,59,71,57,"replace"],[73,66,71,64],[73,67,71,65],[73,72,71,70],[73,74,71,72],[73,76,71,74],[73,77,71,75],[74,8,72,6],[75,8,73,6,"parts"],[75,13,73,11],[75,14,73,12,"push"],[75,18,73,16],[75,19,73,17,"current"],[75,26,73,24],[75,27,73,25],[76,8,74,6],[76,12,74,10,"char"],[76,16,74,14],[76,20,74,18],[76,24,74,22],[76,26,74,24],[77,10,75,8],[78,8,76,6],[79,8,77,6,"current"],[79,15,77,13],[79,18,77,16],[80,10,78,8,"segment"],[80,17,78,15],[80,19,78,17],[81,8,79,6],[81,9,79,7],[82,6,80,4],[83,6,81,4],[83,10,81,8,"isRegex"],[83,17,81,15],[83,19,81,17],[84,8,82,6,"current"],[84,15,82,13],[84,16,82,14,"regex"],[84,21,82,19],[84,24,82,22,"current"],[84,31,82,29],[84,32,82,30,"regex"],[84,37,82,35],[84,41,82,39],[84,43,82,41],[85,8,83,6,"current"],[85,15,83,13],[85,16,83,14,"regex"],[85,21,83,19],[85,25,83,23,"char"],[85,29,83,27],[86,6,84,4],[87,6,85,4],[87,10,85,8,"isParam"],[87,17,85,15],[87,21,85,19],[87,22,85,20,"isRegex"],[87,29,85,27],[87,31,85,29],[88,8,86,6,"current"],[88,15,86,13],[88,16,86,14,"param"],[88,21,86,19],[88,24,86,22,"current"],[88,31,86,29],[88,32,86,30,"param"],[88,37,86,35],[88,41,86,39],[88,43,86,41],[89,8,87,6,"current"],[89,15,87,13],[89,16,87,14,"param"],[89,21,87,19],[89,25,87,23,"char"],[89,29,87,27],[90,6,88,4],[91,4,89,2],[92,4,90,2],[92,8,90,6,"isRegex"],[92,15,90,13],[92,17,90,15],[93,6,91,4],[93,12,91,10],[93,16,91,14,"Error"],[93,21,91,19],[93,22,91,20],[93,61,91,59,"path"],[93,65,91,63],[93,67,91,65],[93,68,91,66],[94,4,92,2],[95,4,93,2],[95,8,93,8,"params"],[95,14,93,14],[95,17,93,17,"parts"],[95,22,93,22],[95,23,93,23,"map"],[95,26,93,26],[95,27,93,27,"part"],[95,31,93,31],[95,35,93,35,"part"],[95,39,93,39],[95,40,93,40,"param"],[95,45,93,45],[95,46,93,46],[95,47,93,47,"filter"],[95,53,93,53],[95,54,93,54,"Boolean"],[95,61,93,61],[95,62,93,62],[96,4,94,2],[96,13,94,2,"_ref"],[96,17,94,2],[96,21,94,31,"params"],[96,27,94,37],[96,28,94,38,"entries"],[96,35,94,45],[96,36,94,46],[96,37,94,47],[96,39,94,49],[97,6,94,49],[97,10,94,49,"_ref2"],[97,15,94,49],[97,22,94,49,"_slicedToArray"],[97,36,94,49],[97,37,94,49,"default"],[97,44,94,49],[97,46,94,49,"_ref"],[97,50,94,49],[98,6,94,49],[98,10,94,14,"index"],[98,15,94,19],[98,18,94,19,"_ref2"],[98,23,94,19],[99,6,94,19],[99,10,94,21,"param"],[99,15,94,26],[99,18,94,26,"_ref2"],[99,23,94,26],[100,6,95,4],[100,10,95,8,"params"],[100,16,95,14],[100,17,95,15,"indexOf"],[100,24,95,22],[100,25,95,23,"param"],[100,30,95,28],[100,31,95,29],[100,36,95,34,"index"],[100,41,95,39],[100,43,95,41],[101,8,96,6],[101,14,96,12],[101,18,96,16,"Error"],[101,23,96,21],[101,24,96,22],[101,49,96,47,"param"],[101,54,96,52],[101,74,96,72,"path"],[101,78,96,76],[101,80,96,78],[101,81,96,79],[102,6,97,4],[103,4,98,2],[104,4,99,2],[104,11,99,9,"parts"],[104,16,99,14],[105,2,100,0],[106,0,100,1],[106,3]],"functionMap":{"names":["<global>","getPatternParts","parts.map$argument_0"],"mappings":"AAA;OCK;2BCuF,kBD;CDO"},"hasCjsExports":false},"type":"js/module"}]}