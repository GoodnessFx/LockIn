{"dependencies":[{"name":"./conversions","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":20},"end":{"line":1,"column":44}}],"key":"AUDPhSp3SCRpotk+n4dj5MLm8fk=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var conversions = require(_dependencyMap[0], \"./conversions\");\n  function buildGraph() {\n    var graph = {};\n    var models = Object.keys(conversions);\n    for (var len = models.length, i = 0; i < len; i++) {\n      graph[models[i]] = {\n        distance: -1,\n        parent: null\n      };\n    }\n    return graph;\n  }\n  function deriveBFS(fromModel) {\n    var graph = buildGraph();\n    var queue = [fromModel];\n    graph[fromModel].distance = 0;\n    while (queue.length) {\n      var current = queue.pop();\n      var adjacents = Object.keys(conversions[current]);\n      for (var len = adjacents.length, i = 0; i < len; i++) {\n        var adjacent = adjacents[i];\n        var node = graph[adjacent];\n        if (node.distance === -1) {\n          node.distance = graph[current].distance + 1;\n          node.parent = current;\n          queue.unshift(adjacent);\n        }\n      }\n    }\n    return graph;\n  }\n  function link(from, to) {\n    return function (args) {\n      return to(from(args));\n    };\n  }\n  function wrapConversion(toModel, graph) {\n    var path = [graph[toModel].parent, toModel];\n    var fn = conversions[graph[toModel].parent][toModel];\n    var cur = graph[toModel].parent;\n    while (graph[cur].parent) {\n      path.unshift(graph[cur].parent);\n      fn = link(conversions[graph[cur].parent][cur], fn);\n      cur = graph[cur].parent;\n    }\n    fn.conversion = path;\n    return fn;\n  }\n  module.exports = function (fromModel) {\n    var graph = deriveBFS(fromModel);\n    var conversion = {};\n    var models = Object.keys(graph);\n    for (var len = models.length, i = 0; i < len; i++) {\n      var toModel = models[i];\n      var node = graph[toModel];\n      if (node.parent === null) {\n        continue;\n      }\n      conversion[toModel] = wrapConversion(toModel, graph);\n    }\n    return conversion;\n  };\n});","lineCount":64,"map":[[2,2,1,0],[2,6,1,6,"conversions"],[2,17,1,17],[2,20,1,20,"require"],[2,27,1,27],[2,28,1,27,"_dependencyMap"],[2,42,1,27],[2,62,1,43],[2,63,1,44],[3,2,14,0],[3,11,14,9,"buildGraph"],[3,21,14,19,"buildGraph"],[3,22,14,19],[3,24,14,22],[4,4,15,1],[4,8,15,7,"graph"],[4,13,15,12],[4,16,15,15],[4,17,15,16],[4,18,15,17],[5,4,17,1],[5,8,17,7,"models"],[5,14,17,13],[5,17,17,16,"Object"],[5,23,17,22],[5,24,17,23,"keys"],[5,28,17,27],[5,29,17,28,"conversions"],[5,40,17,39],[5,41,17,40],[6,4,19,1],[6,9,19,6],[6,13,19,10,"len"],[6,16,19,13],[6,19,19,16,"models"],[6,25,19,22],[6,26,19,23,"length"],[6,32,19,29],[6,34,19,31,"i"],[6,35,19,32],[6,38,19,35],[6,39,19,36],[6,41,19,38,"i"],[6,42,19,39],[6,45,19,42,"len"],[6,48,19,45],[6,50,19,47,"i"],[6,51,19,48],[6,53,19,50],[6,55,19,52],[7,6,20,2,"graph"],[7,11,20,7],[7,12,20,8,"models"],[7,18,20,14],[7,19,20,15,"i"],[7,20,20,16],[7,21,20,17],[7,22,20,18],[7,25,20,21],[8,8,23,3,"distance"],[8,16,23,11],[8,18,23,13],[8,19,23,14],[8,20,23,15],[9,8,24,3,"parent"],[9,14,24,9],[9,16,24,11],[10,6,25,2],[10,7,25,3],[11,4,26,1],[12,4,28,1],[12,11,28,8,"graph"],[12,16,28,13],[13,2,29,0],[14,2,32,0],[14,11,32,9,"deriveBFS"],[14,20,32,18,"deriveBFS"],[14,21,32,19,"fromModel"],[14,30,32,28],[14,32,32,30],[15,4,33,1],[15,8,33,7,"graph"],[15,13,33,12],[15,16,33,15,"buildGraph"],[15,26,33,25],[15,27,33,26],[15,28,33,27],[16,4,34,1],[16,8,34,7,"queue"],[16,13,34,12],[16,16,34,15],[16,17,34,16,"fromModel"],[16,26,34,25],[16,27,34,26],[17,4,36,1,"graph"],[17,9,36,6],[17,10,36,7,"fromModel"],[17,19,36,16],[17,20,36,17],[17,21,36,18,"distance"],[17,29,36,26],[17,32,36,29],[17,33,36,30],[18,4,38,1],[18,11,38,8,"queue"],[18,16,38,13],[18,17,38,14,"length"],[18,23,38,20],[18,25,38,22],[19,6,39,2],[19,10,39,8,"current"],[19,17,39,15],[19,20,39,18,"queue"],[19,25,39,23],[19,26,39,24,"pop"],[19,29,39,27],[19,30,39,28],[19,31,39,29],[20,6,40,2],[20,10,40,8,"adjacents"],[20,19,40,17],[20,22,40,20,"Object"],[20,28,40,26],[20,29,40,27,"keys"],[20,33,40,31],[20,34,40,32,"conversions"],[20,45,40,43],[20,46,40,44,"current"],[20,53,40,51],[20,54,40,52],[20,55,40,53],[21,6,42,2],[21,11,42,7],[21,15,42,11,"len"],[21,18,42,14],[21,21,42,17,"adjacents"],[21,30,42,26],[21,31,42,27,"length"],[21,37,42,33],[21,39,42,35,"i"],[21,40,42,36],[21,43,42,39],[21,44,42,40],[21,46,42,42,"i"],[21,47,42,43],[21,50,42,46,"len"],[21,53,42,49],[21,55,42,51,"i"],[21,56,42,52],[21,58,42,54],[21,60,42,56],[22,8,43,3],[22,12,43,9,"adjacent"],[22,20,43,17],[22,23,43,20,"adjacents"],[22,32,43,29],[22,33,43,30,"i"],[22,34,43,31],[22,35,43,32],[23,8,44,3],[23,12,44,9,"node"],[23,16,44,13],[23,19,44,16,"graph"],[23,24,44,21],[23,25,44,22,"adjacent"],[23,33,44,30],[23,34,44,31],[24,8,46,3],[24,12,46,7,"node"],[24,16,46,11],[24,17,46,12,"distance"],[24,25,46,20],[24,30,46,25],[24,31,46,26],[24,32,46,27],[24,34,46,29],[25,10,47,4,"node"],[25,14,47,8],[25,15,47,9,"distance"],[25,23,47,17],[25,26,47,20,"graph"],[25,31,47,25],[25,32,47,26,"current"],[25,39,47,33],[25,40,47,34],[25,41,47,35,"distance"],[25,49,47,43],[25,52,47,46],[25,53,47,47],[26,10,48,4,"node"],[26,14,48,8],[26,15,48,9,"parent"],[26,21,48,15],[26,24,48,18,"current"],[26,31,48,25],[27,10,49,4,"queue"],[27,15,49,9],[27,16,49,10,"unshift"],[27,23,49,17],[27,24,49,18,"adjacent"],[27,32,49,26],[27,33,49,27],[28,8,50,3],[29,6,51,2],[30,4,52,1],[31,4,54,1],[31,11,54,8,"graph"],[31,16,54,13],[32,2,55,0],[33,2,57,0],[33,11,57,9,"link"],[33,15,57,13,"link"],[33,16,57,14,"from"],[33,20,57,18],[33,22,57,20,"to"],[33,24,57,22],[33,26,57,24],[34,4,58,1],[34,11,58,8],[34,21,58,18,"args"],[34,25,58,22],[34,27,58,24],[35,6,59,2],[35,13,59,9,"to"],[35,15,59,11],[35,16,59,12,"from"],[35,20,59,16],[35,21,59,17,"args"],[35,25,59,21],[35,26,59,22],[35,27,59,23],[36,4,60,1],[36,5,60,2],[37,2,61,0],[38,2,63,0],[38,11,63,9,"wrapConversion"],[38,25,63,23,"wrapConversion"],[38,26,63,24,"toModel"],[38,33,63,31],[38,35,63,33,"graph"],[38,40,63,38],[38,42,63,40],[39,4,64,1],[39,8,64,7,"path"],[39,12,64,11],[39,15,64,14],[39,16,64,15,"graph"],[39,21,64,20],[39,22,64,21,"toModel"],[39,29,64,28],[39,30,64,29],[39,31,64,30,"parent"],[39,37,64,36],[39,39,64,38,"toModel"],[39,46,64,45],[39,47,64,46],[40,4,65,1],[40,8,65,5,"fn"],[40,10,65,7],[40,13,65,10,"conversions"],[40,24,65,21],[40,25,65,22,"graph"],[40,30,65,27],[40,31,65,28,"toModel"],[40,38,65,35],[40,39,65,36],[40,40,65,37,"parent"],[40,46,65,43],[40,47,65,44],[40,48,65,45,"toModel"],[40,55,65,52],[40,56,65,53],[41,4,67,1],[41,8,67,5,"cur"],[41,11,67,8],[41,14,67,11,"graph"],[41,19,67,16],[41,20,67,17,"toModel"],[41,27,67,24],[41,28,67,25],[41,29,67,26,"parent"],[41,35,67,32],[42,4,68,1],[42,11,68,8,"graph"],[42,16,68,13],[42,17,68,14,"cur"],[42,20,68,17],[42,21,68,18],[42,22,68,19,"parent"],[42,28,68,25],[42,30,68,27],[43,6,69,2,"path"],[43,10,69,6],[43,11,69,7,"unshift"],[43,18,69,14],[43,19,69,15,"graph"],[43,24,69,20],[43,25,69,21,"cur"],[43,28,69,24],[43,29,69,25],[43,30,69,26,"parent"],[43,36,69,32],[43,37,69,33],[44,6,70,2,"fn"],[44,8,70,4],[44,11,70,7,"link"],[44,15,70,11],[44,16,70,12,"conversions"],[44,27,70,23],[44,28,70,24,"graph"],[44,33,70,29],[44,34,70,30,"cur"],[44,37,70,33],[44,38,70,34],[44,39,70,35,"parent"],[44,45,70,41],[44,46,70,42],[44,47,70,43,"cur"],[44,50,70,46],[44,51,70,47],[44,53,70,49,"fn"],[44,55,70,51],[44,56,70,52],[45,6,71,2,"cur"],[45,9,71,5],[45,12,71,8,"graph"],[45,17,71,13],[45,18,71,14,"cur"],[45,21,71,17],[45,22,71,18],[45,23,71,19,"parent"],[45,29,71,25],[46,4,72,1],[47,4,74,1,"fn"],[47,6,74,3],[47,7,74,4,"conversion"],[47,17,74,14],[47,20,74,17,"path"],[47,24,74,21],[48,4,75,1],[48,11,75,8,"fn"],[48,13,75,10],[49,2,76,0],[50,2,78,0,"module"],[50,8,78,6],[50,9,78,7,"exports"],[50,16,78,14],[50,19,78,17],[50,29,78,27,"fromModel"],[50,38,78,36],[50,40,78,38],[51,4,79,1],[51,8,79,7,"graph"],[51,13,79,12],[51,16,79,15,"deriveBFS"],[51,25,79,24],[51,26,79,25,"fromModel"],[51,35,79,34],[51,36,79,35],[52,4,80,1],[52,8,80,7,"conversion"],[52,18,80,17],[52,21,80,20],[52,22,80,21],[52,23,80,22],[53,4,82,1],[53,8,82,7,"models"],[53,14,82,13],[53,17,82,16,"Object"],[53,23,82,22],[53,24,82,23,"keys"],[53,28,82,27],[53,29,82,28,"graph"],[53,34,82,33],[53,35,82,34],[54,4,83,1],[54,9,83,6],[54,13,83,10,"len"],[54,16,83,13],[54,19,83,16,"models"],[54,25,83,22],[54,26,83,23,"length"],[54,32,83,29],[54,34,83,31,"i"],[54,35,83,32],[54,38,83,35],[54,39,83,36],[54,41,83,38,"i"],[54,42,83,39],[54,45,83,42,"len"],[54,48,83,45],[54,50,83,47,"i"],[54,51,83,48],[54,53,83,50],[54,55,83,52],[55,6,84,2],[55,10,84,8,"toModel"],[55,17,84,15],[55,20,84,18,"models"],[55,26,84,24],[55,27,84,25,"i"],[55,28,84,26],[55,29,84,27],[56,6,85,2],[56,10,85,8,"node"],[56,14,85,12],[56,17,85,15,"graph"],[56,22,85,20],[56,23,85,21,"toModel"],[56,30,85,28],[56,31,85,29],[57,6,87,2],[57,10,87,6,"node"],[57,14,87,10],[57,15,87,11,"parent"],[57,21,87,17],[57,26,87,22],[57,30,87,26],[57,32,87,28],[58,8,89,3],[59,6,90,2],[60,6,92,2,"conversion"],[60,16,92,12],[60,17,92,13,"toModel"],[60,24,92,20],[60,25,92,21],[60,28,92,24,"wrapConversion"],[60,42,92,38],[60,43,92,39,"toModel"],[60,50,92,46],[60,52,92,48,"graph"],[60,57,92,53],[60,58,92,54],[61,4,93,1],[62,4,95,1],[62,11,95,8,"conversion"],[62,21,95,18],[63,2,96,0],[63,3,96,1],[64,0,96,2],[64,3]],"functionMap":{"names":["<global>","buildGraph","deriveBFS","link","<anonymous>","wrapConversion","module.exports"],"mappings":"AAA;ACa;CDe;AEG;CFuB;AGE;QCC;EDE;CHC;AKE;CLa;iBME;CNkB"},"hasCjsExports":true},"type":"js/module"}]}