{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":31,"index":46}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/Keyboard","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"4H7FkS8ywD5HLTNk4ggLktoHubI=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/TextInput","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"DmXc1F5dPYWntVgqRwh73w0VngA=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.useKeyboardManager = useKeyboardManager;\n  var _react = require(_dependencyMap[0], \"react\");\n  var React = _interopNamespace(_react);\n  var _reactNativeWebDistExportsKeyboard = require(_dependencyMap[1], \"react-native-web/dist/exports/Keyboard\");\n  var Keyboard = _interopDefault(_reactNativeWebDistExportsKeyboard);\n  var _reactNativeWebDistExportsTextInput = require(_dependencyMap[2], \"react-native-web/dist/exports/TextInput\");\n  var TextInput = _interopDefault(_reactNativeWebDistExportsTextInput);\n  function useKeyboardManager(isEnabled) {\n    // Numeric id of the previously focused text input\n    // When a gesture didn't change the tab, we can restore the focused input with this\n    const previouslyFocusedTextInputRef = React.useRef(undefined);\n    const startTimestampRef = React.useRef(0);\n    const keyboardTimeoutRef = React.useRef(undefined);\n    const clearKeyboardTimeout = React.useCallback(() => {\n      if (keyboardTimeoutRef.current !== undefined) {\n        clearTimeout(keyboardTimeoutRef.current);\n        keyboardTimeoutRef.current = undefined;\n      }\n    }, []);\n    const onPageChangeStart = React.useCallback(() => {\n      if (!isEnabled()) {\n        return;\n      }\n      clearKeyboardTimeout();\n      const input = TextInput.default.State.currentlyFocusedInput();\n\n      // When a page change begins, blur the currently focused input\n      input?.blur();\n\n      // Store the id of this input so we can refocus it if change was cancelled\n      previouslyFocusedTextInputRef.current = input;\n\n      // Store timestamp for touch start\n      startTimestampRef.current = Date.now();\n    }, [clearKeyboardTimeout, isEnabled]);\n    const onPageChangeConfirm = React.useCallback(force => {\n      if (!isEnabled()) {\n        return;\n      }\n      clearKeyboardTimeout();\n      if (force) {\n        // Always dismiss input, even if we don't have a ref to it\n        // We might not have the ref if onPageChangeStart was never called\n        // This can happen if page change was not from a gesture\n        Keyboard.default.dismiss();\n      } else {\n        const input = previouslyFocusedTextInputRef.current;\n\n        // Dismiss the keyboard only if an input was a focused before\n        // This makes sure we don't dismiss input on going back and focusing an input\n        input?.blur();\n      }\n\n      // Cleanup the ID on successful page change\n      previouslyFocusedTextInputRef.current = undefined;\n    }, [clearKeyboardTimeout, isEnabled]);\n    const onPageChangeCancel = React.useCallback(() => {\n      if (!isEnabled()) {\n        return;\n      }\n      clearKeyboardTimeout();\n\n      // The page didn't change, we should restore the focus of text input\n      const input = previouslyFocusedTextInputRef.current;\n      if (input) {\n        // If the interaction was super short we should make sure keyboard won't hide again.\n\n        // Too fast input refocus will result only in keyboard flashing on screen and hiding right away.\n        // During first ~100ms keyboard will be dismissed no matter what,\n        // so we have to make sure it won't interrupt input refocus logic.\n        // That's why when the interaction is shorter than 100ms we add delay so it won't hide once again.\n        // Subtracting timestamps makes us sure the delay is executed only when needed.\n        if (Date.now() - startTimestampRef.current < 100) {\n          keyboardTimeoutRef.current = setTimeout(() => {\n            input?.focus();\n            previouslyFocusedTextInputRef.current = undefined;\n          }, 100);\n        } else {\n          input?.focus();\n          previouslyFocusedTextInputRef.current = undefined;\n        }\n      }\n    }, [clearKeyboardTimeout, isEnabled]);\n    React.useEffect(() => {\n      return () => clearKeyboardTimeout();\n    }, [clearKeyboardTimeout]);\n    return {\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel\n    };\n  }\n});","lineCount":119,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,1,13],[7,11,1,13,"_interopNamespace"],[7,29,1,13,"e"],[7,30,1,13],[8,4,1,13],[8,8,1,13,"e"],[8,9,1,13],[8,13,1,13,"e"],[8,14,1,13],[8,15,1,13,"__esModule"],[8,25,1,13],[8,34,1,13,"e"],[8,35,1,13],[9,4,1,13],[9,8,1,13,"n"],[9,9,1,13],[10,4,1,13],[10,8,1,13,"e"],[10,9,1,13],[10,11,1,13,"Object"],[10,17,1,13],[10,18,1,13,"keys"],[10,22,1,13],[10,23,1,13,"e"],[10,24,1,13],[10,26,1,13,"forEach"],[10,33,1,13],[10,44,1,13,"k"],[10,45,1,13],[11,6,1,13],[11,10,1,13,"d"],[11,11,1,13],[11,14,1,13,"Object"],[11,20,1,13],[11,21,1,13,"getOwnPropertyDescriptor"],[11,45,1,13],[11,46,1,13,"e"],[11,47,1,13],[11,49,1,13,"k"],[11,50,1,13],[12,6,1,13,"Object"],[12,12,1,13],[12,13,1,13,"defineProperty"],[12,27,1,13],[12,28,1,13,"n"],[12,29,1,13],[12,31,1,13,"k"],[12,32,1,13],[12,34,1,13,"d"],[12,35,1,13],[12,36,1,13,"get"],[12,39,1,13],[12,42,1,13,"d"],[12,43,1,13],[13,8,1,13,"enumerable"],[13,18,1,13],[14,8,1,13,"get"],[14,11,1,13],[14,22,1,13,"get"],[14,23,1,13],[15,10,1,13],[15,17,1,13,"e"],[15,18,1,13],[15,19,1,13,"k"],[15,20,1,13],[16,8,1,13],[17,6,1,13],[18,4,1,13],[19,4,1,13,"n"],[19,5,1,13],[19,6,1,13,"default"],[19,13,1,13],[19,16,1,13,"e"],[19,17,1,13],[20,4,1,13],[20,11,1,13,"n"],[20,12,1,13],[21,2,1,13],[22,2,1,13],[22,11,1,13,"_interopDefault"],[22,27,1,13,"e"],[22,28,1,13],[23,4,1,13],[23,11,1,13,"e"],[23,12,1,13],[23,16,1,13,"e"],[23,17,1,13],[23,18,1,13,"__esModule"],[23,28,1,13],[23,31,1,13,"e"],[23,32,1,13],[24,6,1,13,"default"],[24,13,1,13],[24,15,1,13,"e"],[25,4,1,13],[26,2,1,13],[27,2,5,0,"exports"],[27,9,5,0],[27,10,5,0,"useKeyboardManager"],[27,28,5,0],[27,31,5,0,"useKeyboardManager"],[27,49,5,0],[28,2,3,0],[28,6,3,0,"_react"],[28,12,3,0],[28,15,3,0,"require"],[28,22,3,0],[28,23,3,0,"_dependencyMap"],[28,37,3,0],[29,2,3,0],[29,6,3,0,"React"],[29,11,3,0],[29,14,3,0,"_interopNamespace"],[29,31,3,0],[29,32,3,0,"_react"],[29,38,3,0],[30,2,3,31],[30,6,3,31,"_reactNativeWebDistExportsKeyboard"],[30,40,3,31],[30,43,3,31,"require"],[30,50,3,31],[30,51,3,31,"_dependencyMap"],[30,65,3,31],[31,2,3,31],[31,6,3,31,"Keyboard"],[31,14,3,31],[31,17,3,31,"_interopDefault"],[31,32,3,31],[31,33,3,31,"_reactNativeWebDistExportsKeyboard"],[31,67,3,31],[32,2,3,31],[32,6,3,31,"_reactNativeWebDistExportsTextInput"],[32,41,3,31],[32,44,3,31,"require"],[32,51,3,31],[32,52,3,31,"_dependencyMap"],[32,66,3,31],[33,2,3,31],[33,6,3,31,"TextInput"],[33,15,3,31],[33,18,3,31,"_interopDefault"],[33,33,3,31],[33,34,3,31,"_reactNativeWebDistExportsTextInput"],[33,69,3,31],[34,2,5,7],[34,11,5,16,"useKeyboardManager"],[34,29,5,34,"useKeyboardManager"],[34,30,5,35,"isEnabled"],[34,39,5,44],[34,41,5,46],[35,4,6,2],[36,4,7,2],[37,4,8,2],[37,10,8,8,"previouslyFocusedTextInputRef"],[37,39,8,37],[37,42,8,40,"React"],[37,47,8,45],[37,48,8,46,"useRef"],[37,54,8,52],[37,55,8,53,"undefined"],[37,64,8,62],[37,65,8,63],[38,4,9,2],[38,10,9,8,"startTimestampRef"],[38,27,9,25],[38,30,9,28,"React"],[38,35,9,33],[38,36,9,34,"useRef"],[38,42,9,40],[38,43,9,41],[38,44,9,42],[38,45,9,43],[39,4,10,2],[39,10,10,8,"keyboardTimeoutRef"],[39,28,10,26],[39,31,10,29,"React"],[39,36,10,34],[39,37,10,35,"useRef"],[39,43,10,41],[39,44,10,42,"undefined"],[39,53,10,51],[39,54,10,52],[40,4,11,2],[40,10,11,8,"clearKeyboardTimeout"],[40,30,11,28],[40,33,11,31,"React"],[40,38,11,36],[40,39,11,37,"useCallback"],[40,50,11,48],[40,51,11,49],[40,57,11,55],[41,6,12,4],[41,10,12,8,"keyboardTimeoutRef"],[41,28,12,26],[41,29,12,27,"current"],[41,36,12,34],[41,41,12,39,"undefined"],[41,50,12,48],[41,52,12,50],[42,8,13,6,"clearTimeout"],[42,20,13,18],[42,21,13,19,"keyboardTimeoutRef"],[42,39,13,37],[42,40,13,38,"current"],[42,47,13,45],[42,48,13,46],[43,8,14,6,"keyboardTimeoutRef"],[43,26,14,24],[43,27,14,25,"current"],[43,34,14,32],[43,37,14,35,"undefined"],[43,46,14,44],[44,6,15,4],[45,4,16,2],[45,5,16,3],[45,7,16,5],[45,9,16,7],[45,10,16,8],[46,4,17,2],[46,10,17,8,"onPageChangeStart"],[46,27,17,25],[46,30,17,28,"React"],[46,35,17,33],[46,36,17,34,"useCallback"],[46,47,17,45],[46,48,17,46],[46,54,17,52],[47,6,18,4],[47,10,18,8],[47,11,18,9,"isEnabled"],[47,20,18,18],[47,21,18,19],[47,22,18,20],[47,24,18,22],[48,8,19,6],[49,6,20,4],[50,6,21,4,"clearKeyboardTimeout"],[50,26,21,24],[50,27,21,25],[50,28,21,26],[51,6,22,4],[51,12,22,10,"input"],[51,17,22,15],[51,20,22,18,"TextInput"],[51,29,22,27],[51,30,22,27,"default"],[51,37,22,27],[51,38,22,28,"State"],[51,43,22,33],[51,44,22,34,"currentlyFocusedInput"],[51,65,22,55],[51,66,22,56],[51,67,22,57],[53,6,24,4],[54,6,25,4,"input"],[54,11,25,9],[54,13,25,11,"blur"],[54,17,25,15],[54,18,25,16],[54,19,25,17],[56,6,27,4],[57,6,28,4,"previouslyFocusedTextInputRef"],[57,35,28,33],[57,36,28,34,"current"],[57,43,28,41],[57,46,28,44,"input"],[57,51,28,49],[59,6,30,4],[60,6,31,4,"startTimestampRef"],[60,23,31,21],[60,24,31,22,"current"],[60,31,31,29],[60,34,31,32,"Date"],[60,38,31,36],[60,39,31,37,"now"],[60,42,31,40],[60,43,31,41],[60,44,31,42],[61,4,32,2],[61,5,32,3],[61,7,32,5],[61,8,32,6,"clearKeyboardTimeout"],[61,28,32,26],[61,30,32,28,"isEnabled"],[61,39,32,37],[61,40,32,38],[61,41,32,39],[62,4,33,2],[62,10,33,8,"onPageChangeConfirm"],[62,29,33,27],[62,32,33,30,"React"],[62,37,33,35],[62,38,33,36,"useCallback"],[62,49,33,47],[62,50,33,48,"force"],[62,55,33,53],[62,59,33,57],[63,6,34,4],[63,10,34,8],[63,11,34,9,"isEnabled"],[63,20,34,18],[63,21,34,19],[63,22,34,20],[63,24,34,22],[64,8,35,6],[65,6,36,4],[66,6,37,4,"clearKeyboardTimeout"],[66,26,37,24],[66,27,37,25],[66,28,37,26],[67,6,38,4],[67,10,38,8,"force"],[67,15,38,13],[67,17,38,15],[68,8,39,6],[69,8,40,6],[70,8,41,6],[71,8,42,6,"Keyboard"],[71,16,42,14],[71,17,42,14,"default"],[71,24,42,14],[71,25,42,15,"dismiss"],[71,32,42,22],[71,33,42,23],[71,34,42,24],[72,6,43,4],[72,7,43,5],[72,13,43,11],[73,8,44,6],[73,14,44,12,"input"],[73,19,44,17],[73,22,44,20,"previouslyFocusedTextInputRef"],[73,51,44,49],[73,52,44,50,"current"],[73,59,44,57],[75,8,46,6],[76,8,47,6],[77,8,48,6,"input"],[77,13,48,11],[77,15,48,13,"blur"],[77,19,48,17],[77,20,48,18],[77,21,48,19],[78,6,49,4],[80,6,51,4],[81,6,52,4,"previouslyFocusedTextInputRef"],[81,35,52,33],[81,36,52,34,"current"],[81,43,52,41],[81,46,52,44,"undefined"],[81,55,52,53],[82,4,53,2],[82,5,53,3],[82,7,53,5],[82,8,53,6,"clearKeyboardTimeout"],[82,28,53,26],[82,30,53,28,"isEnabled"],[82,39,53,37],[82,40,53,38],[82,41,53,39],[83,4,54,2],[83,10,54,8,"onPageChangeCancel"],[83,28,54,26],[83,31,54,29,"React"],[83,36,54,34],[83,37,54,35,"useCallback"],[83,48,54,46],[83,49,54,47],[83,55,54,53],[84,6,55,4],[84,10,55,8],[84,11,55,9,"isEnabled"],[84,20,55,18],[84,21,55,19],[84,22,55,20],[84,24,55,22],[85,8,56,6],[86,6,57,4],[87,6,58,4,"clearKeyboardTimeout"],[87,26,58,24],[87,27,58,25],[87,28,58,26],[89,6,60,4],[90,6,61,4],[90,12,61,10,"input"],[90,17,61,15],[90,20,61,18,"previouslyFocusedTextInputRef"],[90,49,61,47],[90,50,61,48,"current"],[90,57,61,55],[91,6,62,4],[91,10,62,8,"input"],[91,15,62,13],[91,17,62,15],[92,8,63,6],[94,8,65,6],[95,8,66,6],[96,8,67,6],[97,8,68,6],[98,8,69,6],[99,8,70,6],[99,12,70,10,"Date"],[99,16,70,14],[99,17,70,15,"now"],[99,20,70,18],[99,21,70,19],[99,22,70,20],[99,25,70,23,"startTimestampRef"],[99,42,70,40],[99,43,70,41,"current"],[99,50,70,48],[99,53,70,51],[99,56,70,54],[99,58,70,56],[100,10,71,8,"keyboardTimeoutRef"],[100,28,71,26],[100,29,71,27,"current"],[100,36,71,34],[100,39,71,37,"setTimeout"],[100,49,71,47],[100,50,71,48],[100,56,71,54],[101,12,72,10,"input"],[101,17,72,15],[101,19,72,17,"focus"],[101,24,72,22],[101,25,72,23],[101,26,72,24],[102,12,73,10,"previouslyFocusedTextInputRef"],[102,41,73,39],[102,42,73,40,"current"],[102,49,73,47],[102,52,73,50,"undefined"],[102,61,73,59],[103,10,74,8],[103,11,74,9],[103,13,74,11],[103,16,74,14],[103,17,74,15],[104,8,75,6],[104,9,75,7],[104,15,75,13],[105,10,76,8,"input"],[105,15,76,13],[105,17,76,15,"focus"],[105,22,76,20],[105,23,76,21],[105,24,76,22],[106,10,77,8,"previouslyFocusedTextInputRef"],[106,39,77,37],[106,40,77,38,"current"],[106,47,77,45],[106,50,77,48,"undefined"],[106,59,77,57],[107,8,78,6],[108,6,79,4],[109,4,80,2],[109,5,80,3],[109,7,80,5],[109,8,80,6,"clearKeyboardTimeout"],[109,28,80,26],[109,30,80,28,"isEnabled"],[109,39,80,37],[109,40,80,38],[109,41,80,39],[110,4,81,2,"React"],[110,9,81,7],[110,10,81,8,"useEffect"],[110,19,81,17],[110,20,81,18],[110,26,81,24],[111,6,82,4],[111,13,82,11],[111,19,82,17,"clearKeyboardTimeout"],[111,39,82,37],[111,40,82,38],[111,41,82,39],[112,4,83,2],[112,5,83,3],[112,7,83,5],[112,8,83,6,"clearKeyboardTimeout"],[112,28,83,26],[112,29,83,27],[112,30,83,28],[113,4,84,2],[113,11,84,9],[114,6,85,4,"onPageChangeStart"],[114,23,85,21],[115,6,86,4,"onPageChangeConfirm"],[115,25,86,23],[116,6,87,4,"onPageChangeCancel"],[117,4,88,2],[117,5,88,3],[118,2,89,0],[119,0,89,1],[119,3]],"functionMap":{"names":["<global>","useKeyboardManager","clearKeyboardTimeout","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","setTimeout$argument_0","React.useEffect$argument_0","<anonymous>"],"mappings":"AAA;OCI;iDCM;GDK;8CEC;GFe;gDGC;GHoB;+CIC;gDCiB;SDG;GJM;kBMC;WCC,4BD;GNC;CDM"},"hasCjsExports":false},"type":"js/module"}]}