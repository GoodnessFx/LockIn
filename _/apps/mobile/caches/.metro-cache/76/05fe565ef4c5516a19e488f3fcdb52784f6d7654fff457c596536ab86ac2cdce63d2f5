{"dependencies":[{"name":"./lib/markup","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":14},"end":{"line":7,"column":37}}],"key":"jmWyOIwUhawNxN+alOZIsh3EVEk=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.test = exports.serialize = exports.default = void 0;\n  var _markup = require(_dependencyMap[0], \"./lib/markup\");\n  var ELEMENT_NODE = 1;\n  var TEXT_NODE = 3;\n  var COMMENT_NODE = 8;\n  var FRAGMENT_NODE = 11;\n  var ELEMENT_REGEXP = /^((HTML|SVG)\\w*)?Element$/;\n  var testHasAttribute = val => {\n    try {\n      return typeof val.hasAttribute === 'function' && val.hasAttribute('is');\n    } catch {\n      return false;\n    }\n  };\n  var testNode = val => {\n    var constructorName = val.constructor.name;\n    var nodeType = val.nodeType,\n      tagName = val.tagName;\n    var isCustomElement = typeof tagName === 'string' && tagName.includes('-') || testHasAttribute(val);\n    return nodeType === ELEMENT_NODE && (ELEMENT_REGEXP.test(constructorName) || isCustomElement) || nodeType === TEXT_NODE && constructorName === 'Text' || nodeType === COMMENT_NODE && constructorName === 'Comment' || nodeType === FRAGMENT_NODE && constructorName === 'DocumentFragment';\n  };\n  var test = val => val?.constructor?.name && testNode(val);\n  exports.test = test;\n  function nodeIsText(node) {\n    return node.nodeType === TEXT_NODE;\n  }\n  function nodeIsComment(node) {\n    return node.nodeType === COMMENT_NODE;\n  }\n  function nodeIsFragment(node) {\n    return node.nodeType === FRAGMENT_NODE;\n  }\n  var serialize = (node, config, indentation, depth, refs, printer) => {\n    if (nodeIsText(node)) {\n      return (0, _markup.printText)(node.data, config);\n    }\n    if (nodeIsComment(node)) {\n      return (0, _markup.printComment)(node.data, config);\n    }\n    var type = nodeIsFragment(node) ? 'DocumentFragment' : node.tagName.toLowerCase();\n    if (++depth > config.maxDepth) {\n      return (0, _markup.printElementAsLeaf)(type, config);\n    }\n    return (0, _markup.printElement)(type, (0, _markup.printProps)(nodeIsFragment(node) ? [] : Array.from(node.attributes, attr => attr.name).sort(), nodeIsFragment(node) ? {} : Array.from(node.attributes).reduce((props, attribute) => {\n      props[attribute.name] = attribute.value;\n      return props;\n    }, {}), config, indentation + config.indent, depth, refs, printer), (0, _markup.printChildren)(Array.prototype.slice.call(node.childNodes || node.children), config, indentation + config.indent, depth, refs, printer), config, indentation);\n  };\n  exports.serialize = serialize;\n  var plugin = {\n    serialize,\n    test\n  };\n  var _default = plugin;\n  exports.default = _default;\n});","lineCount":62,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,2,5,0],[6,3,5,1],[6,4,5,2],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"test"],[7,14,6,12],[7,17,6,15,"exports"],[7,24,6,22],[7,25,6,23,"serialize"],[7,34,6,32],[7,37,6,35,"exports"],[7,44,6,42],[7,45,6,43,"default"],[7,52,6,50],[7,55,6,53],[7,60,6,58],[7,61,6,59],[8,2,7,0],[8,6,7,4,"_markup"],[8,13,7,11],[8,16,7,14,"require"],[8,23,7,21],[8,24,7,21,"_dependencyMap"],[8,38,7,21],[8,57,7,36],[8,58,7,37],[9,2,15,0],[9,6,15,6,"ELEMENT_NODE"],[9,18,15,18],[9,21,15,21],[9,22,15,22],[10,2,16,0],[10,6,16,6,"TEXT_NODE"],[10,15,16,15],[10,18,16,18],[10,19,16,19],[11,2,17,0],[11,6,17,6,"COMMENT_NODE"],[11,18,17,18],[11,21,17,21],[11,22,17,22],[12,2,18,0],[12,6,18,6,"FRAGMENT_NODE"],[12,19,18,19],[12,22,18,22],[12,24,18,24],[13,2,19,0],[13,6,19,6,"ELEMENT_REGEXP"],[13,20,19,20],[13,23,19,23],[13,50,19,50],[14,2,20,0],[14,6,20,6,"testHasAttribute"],[14,22,20,22],[14,25,20,25,"val"],[14,28,20,28],[14,32,20,32],[15,4,21,2],[15,8,21,6],[16,6,22,4],[16,13,22,11],[16,20,22,18,"val"],[16,23,22,21],[16,24,22,22,"hasAttribute"],[16,36,22,34],[16,41,22,39],[16,51,22,49],[16,55,22,53,"val"],[16,58,22,56],[16,59,22,57,"hasAttribute"],[16,71,22,69],[16,72,22,70],[16,76,22,74],[16,77,22,75],[17,4,23,2],[17,5,23,3],[17,6,23,4],[17,12,23,10],[18,6,24,4],[18,13,24,11],[18,18,24,16],[19,4,25,2],[20,2,26,0],[20,3,26,1],[21,2,27,0],[21,6,27,6,"testNode"],[21,14,27,14],[21,17,27,17,"val"],[21,20,27,20],[21,24,27,24],[22,4,28,2],[22,8,28,8,"constructorName"],[22,23,28,23],[22,26,28,26,"val"],[22,29,28,29],[22,30,28,30,"constructor"],[22,41,28,41],[22,42,28,42,"name"],[22,46,28,46],[23,4,29,2],[23,8,29,9,"nodeType"],[23,16,29,17],[23,19,29,30,"val"],[23,22,29,33],[23,23,29,9,"nodeType"],[23,31,29,17],[24,6,29,19,"tagName"],[24,13,29,26],[24,16,29,30,"val"],[24,19,29,33],[24,20,29,19,"tagName"],[24,27,29,26],[25,4,30,2],[25,8,30,8,"isCustomElement"],[25,23,30,23],[25,26,31,5],[25,33,31,12,"tagName"],[25,40,31,19],[25,45,31,24],[25,53,31,32],[25,57,31,36,"tagName"],[25,64,31,43],[25,65,31,44,"includes"],[25,73,31,52],[25,74,31,53],[25,77,31,56],[25,78,31,57],[25,82,32,4,"testHasAttribute"],[25,98,32,20],[25,99,32,21,"val"],[25,102,32,24],[25,103,32,25],[26,4,33,2],[26,11,34,5,"nodeType"],[26,19,34,13],[26,24,34,18,"ELEMENT_NODE"],[26,36,34,30],[26,41,35,7,"ELEMENT_REGEXP"],[26,55,35,21],[26,56,35,22,"test"],[26,60,35,26],[26,61,35,27,"constructorName"],[26,76,35,42],[26,77,35,43],[26,81,35,47,"isCustomElement"],[26,96,35,62],[26,97,35,63],[26,101,36,5,"nodeType"],[26,109,36,13],[26,114,36,18,"TEXT_NODE"],[26,123,36,27],[26,127,36,31,"constructorName"],[26,142,36,46],[26,147,36,51],[26,153,36,58],[26,157,37,5,"nodeType"],[26,165,37,13],[26,170,37,18,"COMMENT_NODE"],[26,182,37,30],[26,186,37,34,"constructorName"],[26,201,37,49],[26,206,37,54],[26,215,37,64],[26,219,38,5,"nodeType"],[26,227,38,13],[26,232,38,18,"FRAGMENT_NODE"],[26,245,38,31],[26,249,38,35,"constructorName"],[26,264,38,50],[26,269,38,55],[26,287,38,74],[27,2,40,0],[27,3,40,1],[28,2,41,0],[28,6,41,6,"test"],[28,10,41,10],[28,13,41,13,"val"],[28,16,41,16],[28,20,41,20,"val"],[28,23,41,23],[28,25,41,25,"constructor"],[28,36,41,36],[28,38,41,38,"name"],[28,42,41,42],[28,46,41,46,"testNode"],[28,54,41,54],[28,55,41,55,"val"],[28,58,41,58],[28,59,41,59],[29,2,42,0,"exports"],[29,9,42,7],[29,10,42,8,"test"],[29,14,42,12],[29,17,42,15,"test"],[29,21,42,19],[30,2,43,0],[30,11,43,9,"nodeIsText"],[30,21,43,19,"nodeIsText"],[30,22,43,20,"node"],[30,26,43,24],[30,28,43,26],[31,4,44,2],[31,11,44,9,"node"],[31,15,44,13],[31,16,44,14,"nodeType"],[31,24,44,22],[31,29,44,27,"TEXT_NODE"],[31,38,44,36],[32,2,45,0],[33,2,46,0],[33,11,46,9,"nodeIsComment"],[33,24,46,22,"nodeIsComment"],[33,25,46,23,"node"],[33,29,46,27],[33,31,46,29],[34,4,47,2],[34,11,47,9,"node"],[34,15,47,13],[34,16,47,14,"nodeType"],[34,24,47,22],[34,29,47,27,"COMMENT_NODE"],[34,41,47,39],[35,2,48,0],[36,2,49,0],[36,11,49,9,"nodeIsFragment"],[36,25,49,23,"nodeIsFragment"],[36,26,49,24,"node"],[36,30,49,28],[36,32,49,30],[37,4,50,2],[37,11,50,9,"node"],[37,15,50,13],[37,16,50,14,"nodeType"],[37,24,50,22],[37,29,50,27,"FRAGMENT_NODE"],[37,42,50,40],[38,2,51,0],[39,2,52,0],[39,6,52,6,"serialize"],[39,15,52,15],[39,18,52,18,"serialize"],[39,19,52,19,"node"],[39,23,52,23],[39,25,52,25,"config"],[39,31,52,31],[39,33,52,33,"indentation"],[39,44,52,44],[39,46,52,46,"depth"],[39,51,52,51],[39,53,52,53,"refs"],[39,57,52,57],[39,59,52,59,"printer"],[39,66,52,66],[39,71,52,71],[40,4,53,2],[40,8,53,6,"nodeIsText"],[40,18,53,16],[40,19,53,17,"node"],[40,23,53,21],[40,24,53,22],[40,26,53,24],[41,6,54,4],[41,13,54,11],[41,14,54,12],[41,15,54,13],[41,17,54,15,"_markup"],[41,24,54,22],[41,25,54,23,"printText"],[41,34,54,32],[41,36,54,34,"node"],[41,40,54,38],[41,41,54,39,"data"],[41,45,54,43],[41,47,54,45,"config"],[41,53,54,51],[41,54,54,52],[42,4,55,2],[43,4,56,2],[43,8,56,6,"nodeIsComment"],[43,21,56,19],[43,22,56,20,"node"],[43,26,56,24],[43,27,56,25],[43,29,56,27],[44,6,57,4],[44,13,57,11],[44,14,57,12],[44,15,57,13],[44,17,57,15,"_markup"],[44,24,57,22],[44,25,57,23,"printComment"],[44,37,57,35],[44,39,57,37,"node"],[44,43,57,41],[44,44,57,42,"data"],[44,48,57,46],[44,50,57,48,"config"],[44,56,57,54],[44,57,57,55],[45,4,58,2],[46,4,59,2],[46,8,59,8,"type"],[46,12,59,12],[46,15,59,15,"nodeIsFragment"],[46,29,59,29],[46,30,59,30,"node"],[46,34,59,34],[46,35,59,35],[46,38,60,6],[46,56,60,24],[46,59,61,6,"node"],[46,63,61,10],[46,64,61,11,"tagName"],[46,71,61,18],[46,72,61,19,"toLowerCase"],[46,83,61,30],[46,84,61,31],[46,85,61,32],[47,4,62,2],[47,8,62,6],[47,10,62,8,"depth"],[47,15,62,13],[47,18,62,16,"config"],[47,24,62,22],[47,25,62,23,"maxDepth"],[47,33,62,31],[47,35,62,33],[48,6,63,4],[48,13,63,11],[48,14,63,12],[48,15,63,13],[48,17,63,15,"_markup"],[48,24,63,22],[48,25,63,23,"printElementAsLeaf"],[48,43,63,41],[48,45,63,43,"type"],[48,49,63,47],[48,51,63,49,"config"],[48,57,63,55],[48,58,63,56],[49,4,64,2],[50,4,65,2],[50,11,65,9],[50,12,65,10],[50,13,65,11],[50,15,65,13,"_markup"],[50,22,65,20],[50,23,65,21,"printElement"],[50,35,65,33],[50,37,66,4,"type"],[50,41,66,8],[50,43,67,4],[50,44,67,5],[50,45,67,6],[50,47,67,8,"_markup"],[50,54,67,15],[50,55,67,16,"printProps"],[50,65,67,26],[50,67,68,6,"nodeIsFragment"],[50,81,68,20],[50,82,68,21,"node"],[50,86,68,25],[50,87,68,26],[50,90,69,10],[50,92,69,12],[50,95,70,10,"Array"],[50,100,70,15],[50,101,70,16,"from"],[50,105,70,20],[50,106,70,21,"node"],[50,110,70,25],[50,111,70,26,"attributes"],[50,121,70,36],[50,123,70,38,"attr"],[50,127,70,42],[50,131,70,46,"attr"],[50,135,70,50],[50,136,70,51,"name"],[50,140,70,55],[50,141,70,56],[50,142,70,57,"sort"],[50,146,70,61],[50,147,70,62],[50,148,70,63],[50,150,71,6,"nodeIsFragment"],[50,164,71,20],[50,165,71,21,"node"],[50,169,71,25],[50,170,71,26],[50,173,72,10],[50,174,72,11],[50,175,72,12],[50,178,73,10,"Array"],[50,183,73,15],[50,184,73,16,"from"],[50,188,73,20],[50,189,73,21,"node"],[50,193,73,25],[50,194,73,26,"attributes"],[50,204,73,36],[50,205,73,37],[50,206,73,38,"reduce"],[50,212,73,44],[50,213,73,45],[50,214,73,46,"props"],[50,219,73,51],[50,221,73,53,"attribute"],[50,230,73,62],[50,235,73,67],[51,6,74,12,"props"],[51,11,74,17],[51,12,74,18,"attribute"],[51,21,74,27],[51,22,74,28,"name"],[51,26,74,32],[51,27,74,33],[51,30,74,36,"attribute"],[51,39,74,45],[51,40,74,46,"value"],[51,45,74,51],[52,6,75,12],[52,13,75,19,"props"],[52,18,75,24],[53,4,76,10],[53,5,76,11],[53,7,76,13],[53,8,76,14],[53,9,76,15],[53,10,76,16],[53,12,77,6,"config"],[53,18,77,12],[53,20,78,6,"indentation"],[53,31,78,17],[53,34,78,20,"config"],[53,40,78,26],[53,41,78,27,"indent"],[53,47,78,33],[53,49,79,6,"depth"],[53,54,79,11],[53,56,80,6,"refs"],[53,60,80,10],[53,62,81,6,"printer"],[53,69,82,4],[53,70,82,5],[53,72,83,4],[53,73,83,5],[53,74,83,6],[53,76,83,8,"_markup"],[53,83,83,15],[53,84,83,16,"printChildren"],[53,97,83,29],[53,99,84,6,"Array"],[53,104,84,11],[53,105,84,12,"prototype"],[53,114,84,21],[53,115,84,22,"slice"],[53,120,84,27],[53,121,84,28,"call"],[53,125,84,32],[53,126,84,33,"node"],[53,130,84,37],[53,131,84,38,"childNodes"],[53,141,84,48],[53,145,84,52,"node"],[53,149,84,56],[53,150,84,57,"children"],[53,158,84,65],[53,159,84,66],[53,161,85,6,"config"],[53,167,85,12],[53,169,86,6,"indentation"],[53,180,86,17],[53,183,86,20,"config"],[53,189,86,26],[53,190,86,27,"indent"],[53,196,86,33],[53,198,87,6,"depth"],[53,203,87,11],[53,205,88,6,"refs"],[53,209,88,10],[53,211,89,6,"printer"],[53,218,90,4],[53,219,90,5],[53,221,91,4,"config"],[53,227,91,10],[53,229,92,4,"indentation"],[53,240,93,2],[53,241,93,3],[54,2,94,0],[54,3,94,1],[55,2,95,0,"exports"],[55,9,95,7],[55,10,95,8,"serialize"],[55,19,95,17],[55,22,95,20,"serialize"],[55,31,95,29],[56,2,96,0],[56,6,96,6,"plugin"],[56,12,96,12],[56,15,96,15],[57,4,97,2,"serialize"],[57,13,97,11],[58,4,98,2,"test"],[59,2,99,0],[59,3,99,1],[60,2,100,0],[60,6,100,4,"_default"],[60,14,100,12],[60,17,100,15,"plugin"],[60,23,100,21],[61,2,101,0,"exports"],[61,9,101,7],[61,10,101,8,"default"],[61,17,101,15],[61,20,101,18,"_default"],[61,28,101,26],[62,0,101,27],[62,3]],"functionMap":{"names":["<global>","testHasAttribute","testNode","test","nodeIsText","nodeIsComment","nodeIsFragment","serialize","Array.from$argument_1","Array.from.reduce$argument_0"],"mappings":"AAA;yBCmB;CDM;iBEC;CFa;aGC,8CH;AIE;CJE;AKC;CLE;AMC;CNE;kBOC;sCCkB,iBD;6CEG;WFG;CPkB"},"hasCjsExports":true},"type":"js/module"}]}